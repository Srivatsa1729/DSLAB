#include<stdio.h>

int main() {
    int i, j, n, bu[10], wa[10], tat[10], t, ct[10], max;
    float awt = 0, att = 0, temp = 0;
    
    // Input the number of processes
    printf("Enter the number of processes -- ");
    scanf("%d", &n);

    // Input burst times for each process
    for(i = 0; i < n; i++) {
        printf("\nEnter Burst Time for process %d -- ", i + 1);
        scanf("%d", &bu[i]);
        ct[i] = bu[i];  // Copy burst times to completion time array
    }

    // Input time slice (quantum)
    printf("\nEnter the size of time slice -- ");
    scanf("%d", &t);

    // Find the maximum burst time to set the number of iterations
    max = bu[0];
    for(i = 1; i < n; i++) {
        if(max < bu[i])
            max = bu[i];
    }

    // Round Robin Scheduling
    for(j = 0; j <= max / t; j++) {
        for(i = 0; i < n; i++) {
            if(bu[i] != 0) {
                if(bu[i] <= t) {
                    // Process completes in this time slice
                    temp += bu[i];
                    tat[i] = temp;  // Turnaround time for the process
                    bu[i] = 0;  // Process is finished
                } else {
                    // Process doesn't complete, reduce burst time and continue
                    bu[i] -= t;
                    temp += t;
                }
            }
        }
    }

    // Calculate waiting times and turnaround times
    for(i = 0; i < n; i++) {
        wa[i] = tat[i] - ct[i];  // Waiting time is turnaround time minus burst time
        att += tat[i];  // Sum of turnaround times
        awt += wa[i];  // Sum of waiting times
    }

    // Calculate average waiting and turnaround times
    printf("\nThe Average Turnaround Time is -- %.2f", att / n);
    printf("\nThe Average Waiting Time is -- %.2f", awt / n);

    // Print process details
    printf("\n\tPROCESS\t BURST TIME\t WAITING TIME\t TURNAROUND TIME\n");
    for(i = 0; i < n; i++) {
        printf("\t%d\t %d\t\t %d\t\t %d\n", i + 1, ct[i], wa[i], tat[i]);
    }

    return 0;
}
